{"version":3,"sources":["model/CeilSaving.js","context/CeilContext.js","hooks/useIncreaseLogic.js","components/widgets/Button.js","components/Jewelry.js","components/Ticket.js","components/Ticket10.js","components/Input.js","hooks/useCalculateResult.js","components/CeilResult.js","App.js","index.js"],"names":["ceilSaving","jewelry","ticket","ticket10","CeilContext","createContext","CeilSaving","isCeilReached","addSaving","increase","target","reachedCeil","useIncreaseLogic","MAX_AMOUNT","ceilContext","useContext","amount","Button","buttonClassName","clicked","onClick","className","Jewelry","getIncrease","added","jewelryButtons","Fragment","map","key","src","process","alt","Ticket","ticketButtons","Ticket10","Input","JEWELRY_RATE","TICKET_RATE","CeilResult","jewelryAmount","ticketAmount","ticket10Amount","getJewelrySum","jewelryForTicket","ticket10ForSingleTicket","Math","floor","getTicketSum","progressRate","toFixed","getProgressRate","useCalculateResult","CEIL_JEWELRY","CEIL_TICKET","jewelrySum","ticketSum","width","App","useState","setCeilSaving","setCeilReached","Provider","value","addedCeilSaving","emptySaving","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e48056f.chunk.js","sourcesContent":["/**\n * 天井貯金の保持状態\n * \n * @property {Number} jewelry : 宝晶石\n * @property {Number} ticket : 単発チケ\n * @property {Number} ticket10 : 10連チケ\n */\nconst ceilSaving = {\n    jewelry: 0,\n    ticket: 0,\n    ticket10: 0,\n}\n\nexport default ceilSaving","import { createContext } from 'react'\n\nimport CeilSaving from '../model/CeilSaving'\n\n/**\n * アプリ用コンテキスト\n * @property {Object} ceilSaving 貯金\n * @property {Boolean} isCeilReached 天井に到達したか 天井以上に加算しないように制御するために利用\n * @property {Function} addSaving ボタンクリック時の増分に応じて貯金を増やす\n * @property {Function} reachedCeil 天井到達を発火\n */\nexport const CeilContext =  createContext({\n\n    ceilSaving: CeilSaving,\n    isCeilReached: false,\n\n    addSaving: (increase, target) => null,\n    reachedCeil: () => null\n})","import { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\n\n/**\n * 増分処理を行うためのロジック \n * \n * @param {String} target 増分を行う元[石・単発チケ・10連チケ]\n * @param {Number} MAX_AMOUNT 増分の最大値 最大値以上に加算すると計算結果が不恰好になるため、制御\n * \n * @return {Array}\n *     @property {Number} amount 現在値\n *     @property {Function} getIncrease 増分を取得\n */\nexport const useIncreaseLogic = (target, MAX_AMOUNT) => {\n\n    const ceilContext = useContext(CeilContext)\n\n    // クリック元に応じて現在値を取得\n    const amount = ceilContext.ceilSaving[target]\n\n    /**\n     * 天井に到達するか否かによって増分を制御し、計算結果を返す\n     * \n     * @param {Number} increase 増分\n     */\n    const getIncrease = (increase) => {\n\n        // 天井に到達していたらそれ以上加算する必要はない\n        if (ceilContext.isCeilReached) {\n            return 0\n        }\n\n        // 最大値に到達するまでの分だけを加算\n        if ((amount + increase) > MAX_AMOUNT) {\n\n            return MAX_AMOUNT - amount\n\n        }\n\n        return increase\n    }\n\n    return [amount, getIncrease]\n}","import React from 'react'\n\n/**\n * 貯金の加算ボタン用コンポーネント\n * \n * @param {Object} props\n *     @property {Number} increase クリック時の増分\n *     @property {String} buttonClassName 表示スタイル用のクラス名\n *     @property {Function} clicked クリックイベント\n */\nconst Button = ({increase, buttonClassName, clicked}) => {\n\n    const buttonClicked = () => {\n\n        clicked(increase)\n    }\n    return (\n\n        <button \n            onClick={buttonClicked}\n            className={`CalcRow__button ${buttonClassName}`}\n        >\n            +{increase}\n        </button>\n    )\n}\n\nexport default Button","import React, { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\nimport { useIncreaseLogic } from '../hooks/useIncreaseLogic'\n\nimport Button from './widgets/Button'\n\nconst MAX_JEWELRY = 90000\nconst TARGET = 'jewelry'\n\n/**\n * 貯金の宝晶石部分\n */\nconst Jewelry = () => {\n\n    const jewelryIncrease = [300, 1000, 3000, 10000]\n\n    const ceilContext = useContext(CeilContext)\n    const [amount, getIncrease] = useIncreaseLogic(TARGET, MAX_JEWELRY)\n\n    /**\n     * 宝晶石加算\n     * \n     * @param {Number} increase 増分\n     */\n    const added = (increase) => {\n\n        ceilContext.addSaving(getIncrease(increase), TARGET)\n    }\n\n    const jewelryButtons =  (\n\n        <React.Fragment>\n\n            {jewelryIncrease.map((increase) => {\n\n                    return <Button \n                                key={increase}\n                                increase={increase}\n                                buttonClassName='button--jewelry'\n                                clicked={added}\n                            />\n                    \n                })}\n\n        </React.Fragment>\n    )\n\n    return (\n\n            <div className=\"CalcRow\">\n\n                <img src={`${process.env.PUBLIC_URL}/Crystal.png`} className=\"CalcRow__image\" alt=\"宝晶石\" />\n                <h2 className=\"CalcRow__count\">{amount}個</h2>\n\n                {jewelryButtons}\n\n            </div>\n    )\n}\n\nexport default Jewelry","import React, { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\nimport { useIncreaseLogic } from '../hooks/useIncreaseLogic'\n\nimport Button from './widgets/Button'\n\nconst MAX_TICKET = 300\nconst TARGET = 'ticket'\n\n/**\n * 貯金の単発チケット部分\n */\nconst Ticket = () => {\n\n    const ticketIncrease = [1, 5, 10, 50]\n\n    const ceilContext = useContext(CeilContext)\n    const [amount, getIncrease] = useIncreaseLogic(TARGET, MAX_TICKET)\n\n    /**\n     * チケット加算\n     * \n     * @param {Number} increase 増分\n     */\n    const added = (increase) => {\n\n        ceilContext.addSaving(getIncrease(increase), TARGET)\n    }\n\n    // 加算ボタン\n    const ticketButtons =  (\n\n        <React.Fragment>\n\n            {ticketIncrease.map((increase) => {\n\n                    return <Button \n                                key={increase}\n                                increase={increase}\n                                buttonClassName='button--ticket'\n                                clicked={added}\n                            />\n                    \n                })}\n\n        </React.Fragment>\n    )\n\n    return (\n\n            <div className=\"CalcRow\">\n\n                <img src={`${process.env.PUBLIC_URL}/1.png`} className=\"CalcRow__image\" alt=\"単発チケ\" />\n                <h2 className=\"CalcRow__count\">{amount}枚</h2>\n\n                {ticketButtons}\n\n            </div>\n    )\n}\n\nexport default Ticket","import React, { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\nimport { useIncreaseLogic } from '../hooks/useIncreaseLogic'\n\nimport Button from './widgets/Button'\n\nconst MAX_TICKET = 30\nconst TARGET = 'ticket10'\n\n/**\n * 貯金の10連チケ部分\n */\nconst Ticket10 = () => {\n\n    const ticketIncrease = [1, 5, 10]\n\n    const ceilContext = useContext(CeilContext)\n    const [amount, getIncrease] = useIncreaseLogic(TARGET, MAX_TICKET)\n\n    /**\n     * 10連チケ加算\n     * \n     * @param {Number} increase 増分\n     */\n    const added = (increase) => {\n\n        ceilContext.addSaving(getIncrease(increase), TARGET)\n    }\n\n    const ticketButtons =  (\n\n        <React.Fragment>\n\n            {ticketIncrease.map((increase) => {\n\n                    return <Button \n                                key={increase}\n                                increase={increase}\n                                buttonClassName='button--10ticket'\n                                clicked={added}\n                            />\n                })}\n\n        </React.Fragment>\n     )\n\n    return (\n\n            <div className=\"CalcRow\">\n\n                <img src={`${process.env.PUBLIC_URL}/10.png`} className=\"CalcRow__image\" alt=\"10連チケ\" />\n                <h2 className=\"CalcRow__count\">{amount}枚</h2>\n\n                {ticketButtons}\n\n            </div>\n    )\n}\n\nexport default Ticket10","import React from 'react'\n\nimport Jewelry from './Jewelry'\nimport Ticket from './Ticket'\nimport Ticket10 from './Ticket10'\n\n/**\n * 入力エリア\n */\nconst Input = () => {\n\n\n    return (\n\n        <div className=\"CeilInput\">\n            \n            <Jewelry />\n\n            <Ticket/>\n\n            <Ticket10/>\n\n        </div>\n\n    )\n}\n\nexport default Input","import { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\n\n// 石とチケットの変換レート\nconst JEWELRY_RATE = {'ticket': 300, 'ticket10': 3000}\nconst TICKET_RATE = {'jewelry': 1/300, 'ticket10': 10}\n\n// 石・チケットの最大値\nconst CEIL_JEWELRY = 90000\nconst CEIL_TICKET = 300\n\n/**\n * 計算結果を導出するロジック\n * \n * @return {Array}\n *     [宝晶石の天井数, チケットの天井数, 石換算の合計値, チケット換算の合計値, 進行度]\n */\nexport const useCalculateResult = () => {\n\n    const ceilContext = useContext(CeilContext)\n    const ceilSaving = ceilContext.ceilSaving\n\n    // 各貯金要素の数量\n    const jewelryAmount =  ceilSaving.jewelry\n    const ticketAmount =   ceilSaving.ticket\n    const ticket10Amount = ceilSaving.ticket10\n\n    /**\n     * 石換算の集計値を取得\n     * \n     * @return {Number} 宝晶石換算での合計量\n     */\n    const getJewelrySum = () => {\n\n        const ticketForJewelry = ticketAmount * JEWELRY_RATE['ticket']\n        const ticket10ForJewelry = ticket10Amount * JEWELRY_RATE['ticket10']\n\n        return jewelryAmount + ticketForJewelry + ticket10ForJewelry\n    }\n\n    /**\n     * チケット換算の集計値を取得\n     * \n     * @return {Number} チケット換算での合計量\n     */\n    const getTicketSum = () => {\n\n        const jewelryForTicket = jewelryAmount * TICKET_RATE['jewelry']\n        const ticket10ForSingleTicket = ticket10Amount * TICKET_RATE['ticket10']\n\n        return Math.floor(jewelryForTicket + ticketAmount + ticket10ForSingleTicket)\n    }\n\n    /**\n     * 天井貯金の進行度を取得\n     * \n     * @return {Number} パーセント形式の進行度\n     */\n    const getProgressRate = () => {\n\n        // 少数第二位までを取得したパーセント形式\n        const progressCeil = getJewelrySum() / CEIL_JEWELRY\n        const progressRate = (progressCeil * 100).toFixed(2)\n\n        // 100%以上は100%に丸める\n        return progressRate >= 100 ? 100 : progressRate\n    }\n\n    return [CEIL_JEWELRY, CEIL_TICKET, getJewelrySum(), getTicketSum(), getProgressRate()]\n}","import React, { useContext } from 'react'\nimport { CeilContext } from '../context/CeilContext'\nimport { useCalculateResult } from '../hooks/useCalculateResult'\n\n/**\n * 計算結果表示コンポーネント\n */\nconst CeilResult = () => {\n\n    const ceilContext = useContext(CeilContext)\n\n    const [CEIL_JEWELRY, CEIL_TICKET, jewelrySum, ticketSum, progressRate] = useCalculateResult()\n\n    // 進行度で天井到達を判定\n    if (progressRate === 100) {\n        ceilContext.reachedCeil()\n    }\n\n    return (\n\n        <div className=\"CeilResult\">\n            <img src={`${process.env.PUBLIC_URL}/Lyria.png`}  className=\"CeilResult__image\" alt=\"ルリア\" />\n\n            <div className=\"CeilResult__Rest\">\n\n                {/* 石換算 */}\n                <div className=\"Rest__crystal\">\n                    <img src={`${process.env.PUBLIC_URL}/Crystal.png`}  width=\"100\" alt=\"宝晶石\" />\n                    <h4>{jewelrySum}</h4>\n                    <h4>&nbsp;/&nbsp;</h4>\n                    <h4>{CEIL_JEWELRY}</h4>\n                </div>\n\n                {/* チケット換算 */}\n                <div className=\"Rest__ticket\">\n                    <img src={`${process.env.PUBLIC_URL}/1.png`}  width=\"100\" alt=\"ガチャチケット\" />\n                    <h4>{ticketSum}</h4>\n                    <h4>&nbsp;/&nbsp;</h4>\n                    <h4>{CEIL_TICKET}</h4>\n                </div>\n\n                {/* 進行度 */}\n                <div className=\"Rest__percentage\">\n                    <h4>{progressRate}%</h4>\n                    <h4>&nbsp;/&nbsp;</h4>\n                    <h4>100%</h4>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default CeilResult","import React, { useState } from 'react'\n\nimport { CeilContext } from './context/CeilContext'\n\nimport CeilSaving from './model/CeilSaving'\n\nimport Input from './components/Input'\nimport CeilResult from './components/CeilResult'\n\nconst App = () => {\n\n    // 天井貯金の状態\n    const [ceilSaving, setCeilSaving] = useState(CeilSaving)\n    // 天井に到達したか\n    const [isCeilReached, setCeilReached] = useState(false)\n\n    /**\n     * 天井貯金を加算\n     * \n     * @param {Number} increase 増分\n     * @param {String} target 増加対象\n     */\n    const addSaving = (increase, target) => {\n\n        const addedCeilSaving = {...ceilSaving}\n        addedCeilSaving[target] += increase\n\n        setCeilSaving(addedCeilSaving)\n    }\n\n    /**\n     * 天井に到達\n     */\n    const reachedCeil = () => {\n        setCeilReached(true)\n    }\n\n    /**\n     * 初期化\n     */\n    const reset = () => {\n\n        const emptySaving = {...CeilSaving}\n\n        setCeilSaving(emptySaving)\n        setCeilReached(false)\n    }\n\n    return (\n\n        <React.Fragment>\n\n            <CeilContext.Provider \n                value={{\n                    ceilSaving,\n                    isCeilReached,\n                    addSaving,\n                    reachedCeil\n                }}\n            >\n\n                {/* ヘッダ部分 リセット機能を持つ */}\n                <header className=\"Header\">\n                    <h1 className=\"Header__title\">\n                        グラブル天井計算機\n                    </h1>\n                    <button onClick={reset} className=\"Header__button button--reset\">\n                        Reset\n                    </button>\n                </header>\n\n                <div className=\"Container\">\n\n                    {/* メイン画像 アイキャッチ用 */}\n                    <div className=\"MainImage\">\n                        <img src={`${process.env.PUBLIC_URL}/Crystal.png`} className=\"MainImage__crystal\" alt=\"メイン画像-宝晶石\" />\n                        <img src={`${process.env.PUBLIC_URL}/Djeeta.png`} className=\"MainImage__character\" alt=\"メイン画像-ジータ\" />\n                    </div>\n\n                    {/* 計算処理部分 */}\n                    <div className=\"CalcArea\">\n\n                        <Input />\n\n                        <CeilResult />\n\n                    </div>\n\n                </div>\n\n            </CeilContext.Provider>\n        </React.Fragment>\n\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}